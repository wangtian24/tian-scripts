name: Deploy Webhooks Service

on:
  push:
    branches: [ staging ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      region:
        description: 'Region to deploy to'
        required: true
        default: 'us-east4'
        type: choice
        options:
        - us-east4
        - us-central1

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: webhooks-service-${{ github.event.inputs.environment || 'staging' }}
  IMAGE_NAME: "gcr.io/yupp-llms/webhooks-service-${{ github.event.inputs.environment || 'staging' }}:v1"
  REGION: ${{ github.event.inputs.region || 'us-east4' }}

permissions:
  contents: write
  packages: read

jobs:
  deploy-webhooks:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_PRODUCTION }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_STAGING }}" >> $GITHUB_ENV
        fi

    - name: Create .env file
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env
        echo "PROJECT_NAME=\"Yupp-Server\" " >> .env
        echo "USE_GOOGLE_CLOUD_LOGGING=True" >> .env
        echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> .env
        if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PRODUCTION }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_PRODUCTION }}" >> .env
        else
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_STAGING }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_STAGING }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_STAGING }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_STAGING }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGING }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_STAGING }}" >> .env
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker
      run: gcloud auth configure-docker --quiet

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: Dockerfile.webhooks

    - name: Install gcloud beta
      run: gcloud components install beta

    - name: Deploy to Cloud Run
      run: |
        gcloud beta run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --cpu 1 \
          --memory 1Gi \
          --args=service \
          --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
          --command="/app/ypl/webhooks/entrypoint.sh"

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Cache Poetry install
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-1.8.2-0

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --sync

    - name: Tag commit
      run: |
        git fetch --tags
        TAG_NAME=latest-webhooks-${{ github.event.inputs.environment || 'staging' }}
        PR_TITLES=$(git log $TAG_NAME..HEAD --pretty=format:"* %s (%al)")
        {
          echo "PR_TITLES<<EOF"
          echo "${PR_TITLES}"
          echo "EOF"
        } >> $GITHUB_ENV
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git tag -f $TAG_NAME ${{ github.sha }}
        git push origin $TAG_NAME --force

    - name: Post to Slack for Production Deployment
      if: env.ENVIRONMENT == 'production'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "New webhooks service version deployed to production",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "New webhooks service version deployed to production\nChanges since last deployment:\n${{ env.PR_TITLES || '* No changes to report' }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_GG_PUSH_PRODUCTION }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK 