name: Build and Deploy v2 (WIP)

on:
  push:
    branches: [ staging ]
  schedule:
    - cron: '0 10,22 * * *'  # Runs at 10 AM/PM UTC (3 AM/PM PST) daily
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image:
        description: 'Image to deploy (use backend, unless you want to deploy the pytorch services)'
        required: true
        default: 'backend'
        type: choice
        options:
        - backend
        - backend-pytorch-service
      service_name:
        description: 'Service name (backend == yupp-mind)'
        required: true
        default: 'backend'
        type: choice
        options:
        - backend
        - webhooks
        - partner-payments-server
        - backend-pytorch-service
      region:
        description: 'Region to deploy to'
        required: true
        default: 'us-east4'
        type: choice
        options:
        - us-east4
        - us-central1
      gpu:
        description: 'Whether to deploy with GPU'
        required: true
        default: false
        type: boolean
      pytorch_serve_gcp_url:
        description: 'URL of the PyTorch Serve GCP service'
        required: true
        default: 'https://backend-pytorch-service-staging-451082535721.us-central1.run.app/api/v1'
        type: string
      llm_gcp_region:
        description: 'GCP region for the LLM'
        required: true
        default: 'us-east4'
        type: string


env:
  GCP_REGION: ${{ github.event.inputs.llm_gcp_region || 'us-east4' }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ github.event.inputs.service_name || 'backend' }}
  CLOUD_RUN_SERVICE_NAME: ${{ github.event.inputs.service_name || 'backend' }}${{ github.event.inputs.environment == 'production' && '' || '-staging' }}
  IMAGE_NAME: "gcr.io/yupp-llms/${{ github.event.inputs.image || 'backend' }}:v2"
  REGION: ${{ github.event.inputs.region || 'us-east4' }}

permissions:
  contents: write  # Permission required for pushing new tags.
  packages: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Remove unused content on github runners.
    - name: Free up space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        df -h

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to compare with main branch

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up environment
      run: |
        echo "SERVICE_NAME=${{ env.SERVICE_NAME }}" >> $GITHUB_ENV
        echo "MEMORY=16Gi" >> $GITHUB_ENV
        echo "CPU=4" >> $GITHUB_ENV

        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_PRODUCTION }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_STAGING }}" >> $GITHUB_ENV
        fi

        if [[ "${{ github.event.inputs.image }}" == "backend-pytorch-service" ]]; then
          echo "DOCKERFILE=Dockerfile.pytorch-service" >> $GITHUB_ENV
        else
          echo "DOCKERFILE=Dockerfile" >> $GITHUB_ENV
        fi

    - name: Check for DB or rules changes
      id: check_changes
      run: |
        git fetch --tags --force
        TAG_NAME=latest-${{ github.event.inputs.environment || 'staging' }}
        if git diff --name-only $TAG_NAME | grep -q -E 'data/reward_rules|ypl/db/alembic/'; then
          echo "DB_OR_RULES_CHANGED=true" >> $GITHUB_ENV
          echo "Detected DB or reward rules changes"
        else
          echo "DB_OR_RULES_CHANGED=false" >> $GITHUB_ENV
          echo "No DB or reward rules changes detected"
        fi

    - name: Create a basic .env file
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env
        echo "PROJECT_NAME=\"Yupp-Server\"" >> .env
        echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> .env

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker
      run: gcloud auth configure-docker --quiet

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ env.DOCKERFILE }}

    - name: Create the .env and .env.yml files
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env
        echo "ENVIRONMENT: '${{ env.ENVIRONMENT }}'" >> .env.yml


    - name: Fill in the common backend ENV variables for 'backend' service in the .env.yml file
      if: env.SERVICE_NAME == 'backend' || env.SERVICE_NAME == 'backend-pytorch-service'
      run: |
        echo "PROJECT_NAME: 'Yupp-Server' " >> .env.yml
        echo "NLTK_DATA: 'data/nltk_data' " >> .env.yml
        echo "BACKEND_CORS_ORIGINS: '${{ env.BACKEND_CORS_ORIGINS }}' " >> .env.yml
        echo "GCP_PROJECT_ID: '${{ env.GCP_PROJECT_ID }}' " >> .env.yml
        echo "GCP_REGION: '${{ env.GCP_REGION }}' " >> .env.yml
        echo "PYTORCH_SERVE_GCP_URL: '${{ env.PYTORCH_SERVE_GCP_URL || 'https://backend-pytorch-service-staging-451082535721.us-central1.run.app/api/v1' }}'" >> .env.yml

        echo "X_API_KEY: '${{ secrets.X_API_KEY }}'" >> .env.yml
        echo "X_ADMIN_API_KEY: '${{ secrets.X_ADMIN_API_KEY }}'" >> .env.yml
        echo "ANALYTICS_SLACK_WEBHOOK_URL: '${{ secrets.ANALYTICS_SLACK_WEBHOOK_URL }}'" >> .env.yml
        echo "CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE: '${{ secrets.CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE }}'" >> .env.yml
        echo "CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE: '${{ secrets.CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE }}'" >> .env.yml

        echo "ROUTING_WEIGHTS: '{\"random\": 0.1, \"top\": 0.7, \"min_simple_cost\": 0.2}'" >> .env.yml
        echo "ROUTING_GOOD_MODELS_ALWAYS: 'true'" >> .env.yml
        echo "USE_GOOGLE_CLOUD_LOGGING: 'true'" >> .env.yml
        echo "ROUTING_TIMEOUT_SECS: '1.25'" >> .env.yml
        echo "EMBED_MESSAGES_UPON_COMPLETION: 'false'" >> .env.yml

    - name: Fill in the production backend ENV variables for 'backend' service in the .env.yml file
      if: env.ENVIRONMENT == 'production' && (env.SERVICE_NAME == 'backend' || env.SERVICE_NAME == 'backend-pytorch-service')
      run: |
        echo "POSTGRES_USER: '${{ secrets.POSTGRES_USER }}'" >> .env.yml
        echo "POSTGRES_PASSWORD: '$(echo "${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" | sed "s/'/''/g")'" >> .env.yml
        echo "POSTGRES_HOST: '${{ secrets.POSTGRES_HOST_PRODUCTION }}'" >> .env.yml
        echo "POSTGRES_DATABASE: '${{ secrets.POSTGRES_DATABASE }}'" >> .env.yml
        echo "POSTGRES_HOST_NON_POOLING: '${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}'" >> .env.yml
        echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET: '${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_PRODUCTION }}'" >> .env.yml
        echo "OPENAI_API_KEY: '${{ secrets.OPENAI_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "AMPLITUDE_API_KEY: '${{ secrets.AMPLITUDE_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "AMPLITUDE_API_SECRET: '${{ secrets.AMPLITUDE_API_SECRET_PRODUCTION }}'" >> .env.yml
        echo "ALIBABA_API_KEY: '${{ secrets.ALIBABA_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "ANTHROPIC_API_KEY: '${{ secrets.ANTHROPIC_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "ANYSCALE_API_KEY: '${{ secrets.ANYSCALE_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "AZURE_API_KEY: '${{ secrets.AZURE_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "BASESCAN_API_KEY: '${{ secrets.BASESCAN_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "BASESCAN_API_URL: '${{ secrets.BASESCAN_API_URL_PRODUCTION }}'" >> .env.yml
        echo "COINBASE_RETAIL_API_KEY_NAME: '${{ secrets.COINBASE_RETAIL_API_KEY_NAME_PRODUCTION }}'" >> .env.yml
        echo "COINBASE_RETAIL_API_SECRET: '${{ secrets.COINBASE_RETAIL_API_SECRET_PRODUCTION }}'" >> .env.yml
        echo "DEEPSEEK_API_KEY: '${{ secrets.DEEPSEEK_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "FIREWORKS_API_KEY: '${{ secrets.FIREWORKS_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "GOOGLE_API_KEY: '${{ secrets.GOOGLE_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "HUGGINGFACE_API_KEY: '${{ secrets.HUGGINGFACE_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "MISTRAL_API_KEY: '${{ secrets.MISTRAL_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "NVIDIA_API_KEY: '${{ secrets.NVIDIA_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "OPENROUTER_API_KEY: '${{ secrets.OPENROUTER_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "PERPLEXITY_API_KEY: '${{ secrets.PERPLEXITY_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "PLAID_CLIENT_ID: '${{ secrets.PLAID_CLIENT_ID_PRODUCTION }}'" >> .env.yml
        echo "PLAID_SECRET: '${{ secrets.PLAID_SECRET_PRODUCTION }}'" >> .env.yml
        echo "TOGETHER_API_KEY: '${{ secrets.TOGETHER_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "GROQ_API_KEY: '${{ secrets.GROQ_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "CEREBRAS_API_KEY: '${{ secrets.CEREBRAS_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "YAPP_API_KEY: '${{ secrets.YAPP_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "YAPP_TMP_API_KEY: '${{ secrets.YAPP_TMP_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "SAMBANOVA_API_KEY: '${{ secrets.SAMBANOVA_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "OLA_KRUTRIM_API_KEY: '${{ secrets.OLA_KRUTRIM_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}'" >> .env.yml
        echo "SLACK_WEBHOOK_CASHOUT: '${{ secrets.SLACK_WEBHOOK_CASHOUT_PRODUCTION }}'" >> .env.yml
        echo "SLACK_MODEL_MANAGEMENT_APP_BOT_TOKEN: '${{ secrets.SLACK_MODEL_MANAGEMENT_APP_BOT_TOKEN_PRODUCTION }}'" >> .env.yml
        echo "TWITTER_BEARER_TOKEN: '${{ secrets.TWITTER_BEARER_TOKEN_PRODUCTION }}'" >> .env.yml
        echo "TWITTER_CONSUMER_KEY: '${{ secrets.TWITTER_CONSUMER_KEY_PRODUCTION }}'" >> .env.yml
        echo "TWITTER_CONSUMER_SECRET: '${{ secrets.TWITTER_CONSUMER_SECRET_PRODUCTION }}'" >> .env.yml
        echo "TWITTER_ACCESS_TOKEN: '${{ secrets.TWITTER_ACCESS_TOKEN_PRODUCTION }}'" >> .env.yml
        echo "TWITTER_ACCESS_TOKEN_SECRET: '${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_PRODUCTION }}'" >> .env.yml
        echo "CDP_API_KEY_NAME: '${{ secrets.CDP_API_KEY_NAME_PRODUCTION }}'" >> .env.yml
        echo "CDP_API_KEY_PRIVATE_KEY: '${{ secrets.CDP_API_KEY_PRIVATE_KEY_PRODUCTION }}'" >> .env.yml
        echo "YUPP_HEAD_APP_BASE_URL: '${{ secrets.YUPP_HEAD_APP_BASE_URL_PRODUCTION }}'" >> .env.yml
        echo "REWARDS_SLACK_WEBHOOK_URL: '${{ secrets.REWARDS_SLACK_WEBHOOK_URL }}'" >> .env.yml
        echo "UPSTASH_REDIS_URL: '${{ secrets.UPSTASH_REDIS_URL_PRODUCTION }}'" >> .env.yml
        echo "UPSTASH_REDIS_TOKEN: '${{ secrets.UPSTASH_REDIS_TOKEN_PRODUCTION }}'" >> .env.yml
        echo "ATTACHMENT_BUCKET: '${{ secrets.ATTACHMENT_BUCKET_PROD }}'" >> .env.yml
        echo "WALLET_ENCRYPTION_KEY: '${{ secrets.WALLET_ENCRYPTION_KEY_PRODUCTION }}'" >> .env.yml
        echo "ATTACHMENT_BUCKET_GEN_IMAGES=\"gs://yupp-generated-images/production\"" >> .env.yml

    - name: Fill in the staging backend ENV variables for 'backend' service in the .env.yml file
      if: env.ENVIRONMENT == 'staging' && (env.SERVICE_NAME == 'backend' || env.SERVICE_NAME == 'backend-pytorch-service')
      run: |
        echo "OPENAI_API_KEY_ROUTING: '${{ secrets.OPENAI_API_KEY_ROUTING }}'" >> .env.yml
        echo "POSTGRES_USER: '${{ secrets.POSTGRES_USER_STAGING }}'" >> .env.yml
        echo "POSTGRES_PASSWORD: '$(echo "${{ secrets.POSTGRES_PASSWORD_STAGING }}" | sed "s/'/''/g")'" >> .env.yml
        echo "POSTGRES_HOST: '${{ secrets.POSTGRES_HOST_STAGING }}'" >> .env.yml
        echo "POSTGRES_DATABASE: '${{ secrets.POSTGRES_DATABASE_STAGING }}'" >> .env.yml
        echo "POSTGRES_HOST_NON_POOLING: '${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}'" >> .env.yml
        echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET: '${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_STAGING }}'" >> .env.yml
        echo "OPENAI_API_KEY: '${{ secrets.OPENAI_API_KEY_STAGING }}'" >> .env.yml
        echo "ALIBABA_API_KEY: '${{ secrets.ALIBABA_API_KEY_STAGING }}'" >> .env.yml
        echo "ANTHROPIC_API_KEY: '${{ secrets.ANTHROPIC_API_KEY_STAGING }}'" >> .env.yml
        echo "ANYSCALE_API_KEY: '${{ secrets.ANYSCALE_API_KEY_STAGING }}'" >> .env.yml
        echo "AZURE_API_KEY: '${{ secrets.AZURE_API_KEY_STAGING }}'" >> .env.yml
        echo "BASESCAN_API_KEY: '${{ secrets.BASESCAN_API_KEY_STAGING }}'" >> .env.yml
        echo "BASESCAN_API_URL: '${{ secrets.BASESCAN_API_URL_STAGING }}'" >> .env.yml
        echo "COINBASE_RETAIL_API_KEY_NAME: '${{ secrets.COINBASE_RETAIL_API_KEY_NAME_STAGING }}'" >> .env.yml
        echo "COINBASE_RETAIL_API_SECRET: '${{ secrets.COINBASE_RETAIL_API_SECRET_STAGING }}'" >> .env.yml
        echo "DEEPSEEK_API_KEY: '${{ secrets.DEEPSEEK_API_KEY_STAGING }}'" >> .env.yml
        echo "FIREWORKS_API_KEY: '${{ secrets.FIREWORKS_API_KEY_STAGING }}'" >> .env.yml
        echo "GOOGLE_API_KEY: '${{ secrets.GOOGLE_API_KEY_STAGING }}'" >> .env.yml
        echo "HUGGINGFACE_API_KEY: '${{ secrets.HUGGINGFACE_API_KEY_STAGING }}'" >> .env.yml
        echo "MISTRAL_API_KEY: '${{ secrets.MISTRAL_API_KEY_STAGING }}'" >> .env.yml
        echo "NVIDIA_API_KEY: '${{ secrets.NVIDIA_API_KEY_STAGING }}'" >> .env.yml
        echo "OPENROUTER_API_KEY: '${{ secrets.OPENROUTER_API_KEY_STAGING }}'" >> .env.yml
        echo "PERPLEXITY_API_KEY: '${{ secrets.PERPLEXITY_API_KEY_STAGING }}'" >> .env.yml
        echo "PLAID_CLIENT_ID: '${{ secrets.PLAID_CLIENT_ID_STAGING }}'" >> .env.yml
        echo "PLAID_SECRET: '${{ secrets.PLAID_SECRET_STAGING }}'" >> .env.yml
        echo "TOGETHER_API_KEY: '${{ secrets.TOGETHER_API_KEY_STAGING }}'" >> .env.yml
        echo "GROQ_API_KEY: '${{ secrets.GROQ_API_KEY_STAGING }}'" >> .env.yml
        echo "CEREBRAS_API_KEY: '${{ secrets.CEREBRAS_API_KEY_STAGING }}'" >> .env.yml
        echo "YAPP_API_KEY: '${{ secrets.YAPP_API_KEY_STAGING }}'" >> .env.yml
        echo "YAPP_TMP_API_KEY: '${{ secrets.YAPP_TMP_API_KEY_STAGING }}'" >> .env.yml
        echo "SAMBANOVA_API_KEY: '${{ secrets.SAMBANOVA_API_KEY_PRODUCTION }}'" >> .env.yml
        echo "OLA_KRUTRIM_API_KEY: '${{ secrets.OLA_KRUTRIM_API_KEY_STAGING }}'" >> .env.yml
        echo "SLACK_WEBHOOK_URL: '${{ secrets.SLACK_WEBHOOK_URL_STAGING }}'" >> .env.yml
        echo "SLACK_WEBHOOK_CASHOUT: '${{ secrets.SLACK_WEBHOOK_CASHOUT_STAGING }}'" >> .env.yml
        echo "SLACK_MODEL_MANAGEMENT_APP_BOT_TOKEN: '${{ secrets.SLACK_MODEL_MANAGEMENT_APP_BOT_TOKEN_STAGING }}'" >> .env.yml
        echo "TWITTER_BEARER_TOKEN: '${{ secrets.TWITTER_BEARER_TOKEN_STAGING }}'" >> .env.yml
        echo "TWITTER_CONSUMER_KEY: '${{ secrets.TWITTER_CONSUMER_KEY_STAGING }}'" >> .env.yml
        echo "TWITTER_CONSUMER_SECRET: '${{ secrets.TWITTER_CONSUMER_SECRET_STAGING }}'" >> .env.yml
        echo "TWITTER_ACCESS_TOKEN: '${{ secrets.TWITTER_ACCESS_TOKEN_STAGING }}'" >> .env.yml
        echo "TWITTER_ACCESS_TOKEN_SECRET: '${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_STAGING }}'" >> .env.yml
        echo "YUPP_HEAD_APP_BASE_URL: '${{ secrets.YUPP_HEAD_APP_BASE_URL_STAGING }}'" >> .env.yml
        echo "CDP_API_KEY_NAME: '${{ secrets.CDP_API_KEY_NAME_STAGING }}'" >> .env.yml
        echo "CDP_API_KEY_PRIVATE_KEY: '${{ secrets.CDP_API_KEY_PRIVATE_KEY_STAGING }}'" >> .env.yml
        echo "UPSTASH_REDIS_URL: '${{ secrets.UPSTASH_REDIS_URL_STAGING }}'" >> .env.yml
        echo "UPSTASH_REDIS_TOKEN: '${{ secrets.UPSTASH_REDIS_TOKEN_STAGING }}'" >> .env.yml
        echo "ATTACHMENT_BUCKET: '${{ secrets.ATTACHMENT_BUCKET_STAGING }}'" >> .env.yml
        echo "WALLET_ENCRYPTION_KEY: '${{ secrets.WALLET_ENCRYPTION_KEY_STAGING }}'" >> .env.yml

        echo "ROUTING_ERROR_FILTER_SOFT_THRESHOLD: '0.3'" >> .env.yml
        echo "ROUTING_ERROR_FILTER_HARD_THRESHOLD: '0.6'" >> .env.yml
        echo "ATTACHMENT_BUCKET_GEN_IMAGES=\"gs://yupp-generated-images/staging\"" >> .env.yml

    - name: Fill in the partner payments server ENV variables for 'partner-payments-server' service in the .env.yml file
      if: env.SERVICE_NAME == 'partner-payments-server'
      run: |
        echo "PROJECT_NAME: 'Yupp Partner Payments Server'" >> .env.yml
        echo "GCP_PROJECT_ID: '${{ env.GCP_PROJECT_ID }}'" >> .env.yml
        echo "X_API_KEY: '${{ secrets.X_API_KEY }}'" >> .env.yml
        echo "USE_GOOGLE_CLOUD_LOGGING: 'true'" >> .env.yml
        echo "SCRIPT_TO_RUN: '/app/ypl/partner_payments/server/entrypoint.sh'" >> .env.yml

    - name: Install gcloud beta
      if: github.event.inputs.gpu == 'true'
      run: gcloud components install beta

    - name: Deploy to Cloud Run
      run: |
        COMMON_ARGS="\
          --image ${{ env.IMAGE_NAME }} \
          --region ${{ env.REGION }} \
          --env-vars-file=.env.yml \
          --allow-unauthenticated \
          --cpu ${{ env.CPU }} \
          --memory ${{ env.MEMORY }} \
          --args=service \
          --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
          --network=default \
          --timeout=10m \
          "
        if [[ "${{ github.event.inputs.gpu }}" == "true" ]]; then
          gcloud beta run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            $COMMON_ARGS \
            --gpu-type nvidia-l4 \
            --gpu 1 \
            --service-min-instances 1 \
            --no-cpu-throttling \
            --subnet=default \
            --vpc-egress=private-ranges-only \
            --command="/app/ypl/pytorch/serve/entrypoint.sh"
        elif [[ "${{ env.SERVICE_NAME }}" == "backend" ]]; then
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            $COMMON_ARGS \
            --platform managed \
            --subnet=default \
            --vpc-egress=private-ranges-only \
            --command="/app/ypl/backend/entrypoint.sh"
        elif [[ "${{ env.SERVICE_NAME }}" == "partner-payments-server" ]]; then
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE_NAME }} \
            $COMMON_ARGS \
            --platform managed \
            --subnet=payment-partners-staging-24 \
            --vpc-egress=all-traffic \
            --command="/app/ypl/partner_payments/server/entrypoint.sh"
        else
          echo "ERROR: Invalid service name"
          exit 1
        fi

    - name: Update traffic to latest version
      run: |
        gcloud run services update-traffic ${{ env.CLOUD_RUN_SERVICE_NAME }} \
          --to-latest \
          --region ${{ env.REGION }} \
          --platform managed

    - name: Setup Python
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Cache Poetry install
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-1.8.2-0

    - name: Install Poetry
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      run: poetry install --no-interaction --no-root --sync

    - name: Run migrations
      if: ${{ env.ENVIRONMENT == 'staging' && env.DB_OR_RULES_CHANGED == 'true' }}
      run: |
        echo "yupp" | poetry run alembic upgrade head

    - name: Refresh reward rules
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      run: poetry run python -m ypl.cli refresh-rewards-rules

    - name: Tag commit
      run: |
        git fetch --tags --force
        TAG_NAME=latest-${{ github.event.inputs.environment || 'staging' }}
        PR_TITLES=$(git log $TAG_NAME..HEAD --pretty=format:"* %s (%al)" | perl -pe 's/\n/  /g' )  # Get changes from last tag.
        echo "PR_TITLES=${PR_TITLES}" >> $GITHUB_ENV
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git tag -f $TAG_NAME ${{ github.sha }}
        git push origin $TAG_NAME --force

    - name: Post to Slack for Production Deployment
      if: env.ENVIRONMENT == 'production'
      continue-on-error: true
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "New backend service version deployed to production",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "New backend service version deployed to production\nChanges since last deployment:\n${{ env.PR_TITLES || '* No changes to report' }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_GG_PUSH_PRODUCTION }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
