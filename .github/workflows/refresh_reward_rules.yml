name: Refresh Reward Rules

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to refresh rules in'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

  push:
    paths:
      - 'data/reward_rules.yml'

jobs:
  refresh-reward-rules:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install --no-interaction --no-root --sync

    - name: Create .env file
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            export ENVIRONMENT="${{ github.event.inputs.environment }}"
            echo "ENVIRONMENT=$ENVIRONMENT" > .env
        else
            export ENVIRONMENT="staging"
            echo "ENVIRONMENT=$ENVIRONMENT" > .env
        fi
        if [[ "$ENVIRONMENT" == "production" ]]; then
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" >> .env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PRODUCTION }}" >> .env
            echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
            echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}" >> .env
        elif [[ "$ENVIRONMENT" == "staging" ]]; then
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_STAGING }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}" >> .env
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_STAGING }}" >> .env
            echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_STAGING }}" >> .env
            echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}" >> .env
        fi

    - name: Refresh rules
      run: poetry run python -m ypl.cli refresh-rewards-rules ${{ github.ref == 'refs/heads/main' || '--dry-run' }}
