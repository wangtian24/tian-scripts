name: Lint and test backend

on:
  push:
    branches:
      - main
  pull_request:

# Required permissions for dorny/path-filter
permissions:
  contents: read
  packages: read
  pull-requests: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: lint
            commands: |
              poetry run ruff check . --output-format=github
              poetry run ruff format . --check
              poetry run mypy --config-file=pyproject.toml .
          - name: test
            commands: poetry run pytest
            is_test: true
          - name: test-alembic
            commands: poetry run pytest --test-alembic tests
            is_test: true
            needs_db_changes: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Path filter step for conditional job
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            db:
              - 'ypl/db/**'
            db_tests:
              - 'tests/**'  # All top level tests are db tests as of now

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Poetry install
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-1.8.2-0

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pydeps-${{ hashFiles('**/poetry.lock') }}-
            pydeps

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --sync

      - name: Cache mypy
        if: matrix.name == 'lint'
        uses: actions/cache@v4
        with:
          path: .mypy_cache
          key: mypy-cache-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            mypy-cache-${{ hashFiles('**/pyproject.toml') }}-
            mypy-cache

      # Setup env file for tests
      - name: Create env file for tests
        if: matrix.is_test
        run: cp .env.test .env

      # Run the check command if either:
      # 1. It's not a DB-dependent test
      # 2. Or it is and DB files have changed
      - name: Run ${{ matrix.name }}
        if: ${{ !matrix.needs_db_changes || (steps.changes.outputs.db == 'true' || steps.changes.outputs.db_tests == 'true') }}
        run: ${{ matrix.commands }}

  lint-and-test-backend:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Combine check results
        run: echo "All checks passed successfully!"