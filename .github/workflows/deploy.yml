name: Build and Deploy

on:
  push:
    branches: [ staging ]
  schedule:
    - cron: '0 9,21 * * *'  # Runs at 9 AM/PM UTC (2 AM/PM PST) daily
  workflow_dispatch:
    inputs:
      use_prompt_conditional_routing:
        description: 'Whether to use prompt-conditional routing'
        required: true
        default: false
        type: boolean
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image:
        description: 'Image to deploy'
        required: true
        default: 'backend'
        type: choice
        options:
        - backend
        - backend-pytorch-service
      region:
        description: 'Region to deploy to'
        required: true
        default: 'us-east4'
        type: choice
        options:
        - us-east4
        - us-central1
      gpu:
        description: 'Whether to deploy with GPU'
        required: true
        default: 'false'
        type: boolean
      categorizer_model_path:
        description: 'Path to the categorizer model'
        required: true
        default: 'gs://yupp-models/category-model.zip'
        type: string


env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ github.event.inputs.image || 'backend' }}
  IMAGE_NAME: "gcr.io/yupp-llms/${{ github.event.inputs.image || 'backend' }}-${{ github.event.inputs.environment || 'staging' }}:v1"
  REGION: ${{ github.event.inputs.region || 'us-east4' }}

permissions:
  contents: write  # Permission required for pushing new tags.
  packages: read
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Remove unused content on github runners.
    - name: Free up space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ github.event.inputs.image || 'backend' }}" >> $GITHUB_ENV
          echo "MEMORY=24Gi" >> $GITHUB_ENV
          echo "CPU=6" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ github.event.inputs.image || 'backend' }}-staging" >> $GITHUB_ENV
          echo "MEMORY=24Gi" >> $GITHUB_ENV
          echo "CPU=6" >> $GITHUB_ENV
        fi

        if [[ "${{ github.event.inputs.image }}" == "backend-pytorch-service" ]]; then
          echo "DOCKERFILE=Dockerfile.pytorch-service" >> $GITHUB_ENV
        else
          echo "DOCKERFILE=Dockerfile" >> $GITHUB_ENV
        fi


    - name: Create .env file
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env
        echo "PROJECT_NAME=\"Yupp-Server\" " >> .env
        echo "NLTK_DATA=\"data/nltk_data\" " >> .env
        echo "BACKEND_CORS_ORIGINS=${{ env.BACKEND_CORS_ORIGINS }}" >> .env
        echo "X_API_KEY=${{ secrets.X_API_KEY }}" >> .env
        echo "CATEGORIZER_MODEL_PATH=${{ github.events.inputs.categorizer_model_path }}" >> .env
        if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PRODUCTION }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_PRODUCTION }}" >> .env
        elif [[ "${{ env.ENVIRONMENT }}" == "staging" ]]; then
          echo "ROUTING_USE_PROMPT_CONDITIONAL=${{ github.event.inputs.use_prompt_conditional_routing || 'false' }}" >> .env
          echo "ROUTING_WEIGHTS='{\"random\": 0.1, \"top\": 0.7, \"min_simple_cost\": 0.2}'" >> .env
          echo "ROUTING_GOOD_MODELS_ALWAYS=True" >> .env
          echo "OPENAI_API_KEY_ROUTING=${{ secrets.OPENAI_API_KEY_ROUTING }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_STAGING }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_STAGING }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_STAGING }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}" >> .env
          echo "USE_GOOGLE_CLOUD_LOGGING=True" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_STAGING }}" >> .env
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker
      run: gcloud auth configure-docker --quiet

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ env.DOCKERFILE }}

    - name: Install gcloud beta
      run: gcloud components install beta

    - name: Deploy to Cloud Run
      run: |
        if [[ "${{ github.event.inputs.gpu }}" == "true" ]]; then
          gcloud beta run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --cpu ${{ env.CPU }} \
            --memory ${{ env.MEMORY }} \
            --gpu-type nvidia-l4 \
            --gpu 1 \
            --service-min-instances 1 \
            --args=service \
            --no-cpu-throttling \
            --command="/app/ypl/pytorch/serve/entrypoint.sh"
        else
          gcloud beta run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --cpu ${{ env.CPU }} \
            --memory ${{ env.MEMORY }} \
            --args=service \
            --command="/app/ypl/backend/entrypoint.sh"
        fi

    - name: Tag commit
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git tag -f latest-${{ github.event.inputs.environment || 'staging' }} ${{ github.sha }}
        git push origin latest-${{ github.event.inputs.environment || 'staging' }} --force
