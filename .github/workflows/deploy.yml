name: Build and Deploy

on:
  push:
    branches: [ staging ]
  schedule:
    - cron: '0 9,21 * * *'  # Runs at 9 AM/PM UTC (2 AM/PM PST) daily
  workflow_dispatch:
    inputs:
      use_prompt_conditional_routing:
        description: 'Whether to use prompt-conditional routing'
        required: true
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      image:
        description: 'Image to deploy'
        required: true
        default: 'backend'
        type: choice
        options:
        - backend
        - backend-pytorch-service
        - backend-pytorch-service-bleeding
      region:
        description: 'Region to deploy to'
        required: true
        default: 'us-east4'
        type: choice
        options:
        - us-east4
        - us-central1
      gpu:
        description: 'Whether to deploy with GPU'
        required: true
        default: 'false'
        type: boolean
      categorizer_model_path:
        description: 'Path to the categorizer model'
        required: true
        default: 'gs://yupp-models/online-classifier-base.zip'
        type: string
      pytorch_serve_gcp_url:
        description: 'URL of the PyTorch Serve GCP service'
        required: true
        default: 'https://backend-pytorch-service-staging-451082535721.us-central1.run.app/api/v1'
        type: string
      llm_gcp_region:
        description: 'GCP region for the LLM'
        required: true
        default: 'us-east4'
        type: string


env:
  GCP_REGION: ${{ github.event.inputs.llm_gcp_region || 'us-east4' }}
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ github.event.inputs.image || 'backend' }}
  IMAGE_NAME: "gcr.io/yupp-llms/${{ github.event.inputs.image || 'backend' }}-${{ github.event.inputs.environment || 'staging' }}:v1"
  REGION: ${{ github.event.inputs.region || 'us-east4' }}
  DB_OR_RULES_CHANGED: 'false'

permissions:
  contents: write  # Permission required for pushing new tags.
  packages: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Remove unused content on github runners.
    - name: Free up space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo swapoff -a
        sudo rm -f /swapfile
        sudo apt clean
        # TODO(ralph): figure out why this started failing.
        # docker rmi $(docker image ls -aq)
        df -h

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history to compare with main branch

    - name: Check for DB or rules changes
      id: check_changes
      run: |
        git fetch --tags
        TAG_NAME=latest-${{ github.event.inputs.environment || 'staging' }}
        if git diff --name-only origin/main $TAG_NAME | grep -q -E 'data/reward_rules\.yml|ypm/db/alembic/'; then
          echo "DB_OR_RULES_CHANGED='true'" >> $GITHUB_ENV
          echo "Detected DB or reward rules changes"
        else
          echo "DB_OR_RULES_CHANGED='false'" >> $GITHUB_ENV
          echo "No DB or reward rules changes detected"
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Set up environment
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.environment }}" == "production" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ github.event.inputs.image || 'backend' }}" >> $GITHUB_ENV
          echo "MEMORY=24Gi" >> $GITHUB_ENV
          echo "CPU=6" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_PRODUCTION }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SERVICE_NAME=${{ github.event.inputs.image || 'backend' }}-staging" >> $GITHUB_ENV
          echo "MEMORY=24Gi" >> $GITHUB_ENV
          echo "CPU=6" >> $GITHUB_ENV
          echo "CLOUD_SQL_CONNECTION_NAME=${{ secrets.CLOUD_SQL_CONNECTION_NAME_STAGING }}" >> $GITHUB_ENV
        fi

        if [[ "${{ github.event.inputs.image }}" == "backend-pytorch-service" || "${{ github.event.inputs.image }}" == "backend-pytorch-service-bleeding" ]]; then
          echo "DOCKERFILE=Dockerfile.pytorch-service" >> $GITHUB_ENV
        else
          echo "DOCKERFILE=Dockerfile" >> $GITHUB_ENV
        fi


    - name: Create .env file
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env
        echo "PROJECT_NAME=\"Yupp-Server\" " >> .env
        echo "NLTK_DATA=\"data/nltk_data\" " >> .env
        echo "BACKEND_CORS_ORIGINS=${{ env.BACKEND_CORS_ORIGINS }}" >> .env
        echo "X_API_KEY=${{ secrets.X_API_KEY }}" >> .env
        echo "X_ADMIN_API_KEY=${{ secrets.X_ADMIN_API_KEY }}" >> .env
        echo "PYTORCH_SERVE_GCP_URL='${{ github.event.inputs.pytorch_serve_gcp_url || 'https://backend-pytorch-service-staging-451082535721.us-central1.run.app/api/v1' }}'" >> .env
        echo "CATEGORIZER_MODEL_PATH=${{ github.events.inputs.categorizer_model_path || 'gs://yupp-models/online-classifier-base.zip' }}" >> .env
        echo "ROUTING_USE_PROMPT_CONDITIONAL=${{ github.event.inputs.use_prompt_conditional_routing || 'true' }}" >> .env
        echo "ROUTING_WEIGHTS='{\"random\": 0.1, \"top\": 0.7, \"min_simple_cost\": 0.2}'" >> .env
        echo "ROUTING_GOOD_MODELS_ALWAYS=True" >> .env
        echo "USE_GOOGLE_CLOUD_LOGGING=True" >> .env
        echo "ANALYTICS_SLACK_WEBHOOK_URL=${{ secrets.ANALYTICS_SLACK_WEBHOOK_URL }}" >> .env
        echo "CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE=${{ secrets.CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE }}" >> .env
        echo "CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE=${{ secrets.CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE }}" >> .env
        echo "ROUTING_TIMEOUT_SECS=1.25" >> .env
        echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> .env
        echo "GCP_REGION=${{ env.GCP_REGION }}" >> .env
        if [[ "${{ env.ENVIRONMENT }}" == "production" ]]; then
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PRODUCTION }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_PRODUCTION }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_PRODUCTION }}" >> .env
          echo "AMPLITUDE_API_KEY=${{ secrets.AMPLITUDE_API_KEY_PRODUCTION }}" >> .env
          echo "AMPLITUDE_API_SECRET=${{ secrets.AMPLITUDE_API_SECRET_PRODUCTION }}" >> .env
          echo "ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY_PRODUCTION }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_PRODUCTION }}" >> .env
          echo "ANYSCALE_API_KEY=${{ secrets.ANYSCALE_API_KEY_PRODUCTION }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY_PRODUCTION }}" >> .env
          echo "BASESCAN_API_KEY=${{ secrets.BASESCAN_API_KEY_PRODUCTION }}" >> .env
          echo "BASESCAN_API_URL=${{ secrets.BASESCAN_API_URL_PRODUCTION }}" >> .env
          echo "COINBASE_RETAIL_API_KEY_NAME=${{ secrets.COINBASE_RETAIL_API_KEY_NAME_PRODUCTION }}" >> .env
          echo "COINBASE_RETAIL_API_SECRET=${{ secrets.COINBASE_RETAIL_API_SECRET_PRODUCTION }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY_PRODUCTION }}" >> .env
          echo "FIREWORKS_API_KEY=${{ secrets.FIREWORKS_API_KEY_PRODUCTION }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY_PRODUCTION }}" >> .env
          echo "HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY_PRODUCTION }}" >> .env
          echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_PRODUCTION }}" >> .env
          echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY_PRODUCTION }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY_PRODUCTION }}" >> .env
          echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY_PRODUCTION }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID_PRODUCTION }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET_PRODUCTION }}" >> .env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY_PRODUCTION }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY_PRODUCTION }}" >> .env
          echo "CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_PRODUCTION }}" >> .env
          echo "TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN_PRODUCTION }}" >> .env
          echo "TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY_PRODUCTION }}" >> .env
          echo "TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET_PRODUCTION }}" >> .env
          echo "TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN_PRODUCTION }}" >> .env
          echo "TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_PRODUCTION }}" >> .env
          echo "CDP_API_KEY_NAME=${{ secrets.CDP_API_KEY_NAME_PRODUCTION }}" >> .env
          echo "CDP_API_KEY_PRIVATE_KEY=${{ secrets.CDP_API_KEY_PRIVATE_KEY_PRODUCTION }}" >> .env
          echo "YUPP_HEAD_APP_BASE_URL=${{ secrets.YUPP_HEAD_APP_BASE_URL_PRODUCTION }}" >> .env
          echo "CRYPTO_WALLET_PATH=${{ secrets.CRYPTO_WALLET_PATH_PRODUCTION }}" >> .env
          echo "REWARDS_SLACK_WEBHOOK_URL=${{ secrets.REWARDS_SLACK_WEBHOOK_URL }}" >> .env
          echo "UPSTASH_REDIS_URL=${{ secrets.UPSTASH_REDIS_URL_PRODUCTION }}" >> .env
          echo "UPSTASH_REDIS_TOKEN=${{ secrets.UPSTASH_REDIS_TOKEN_PRODUCTION }}" >> .env
          echo "ATTACHMENT_BUCKET=${{ secrets.ATTACHMENT_BUCKET_PROD }}" >> .env
        elif [[ "${{ env.ENVIRONMENT }}" == "staging" ]]; then
          echo "OPENAI_API_KEY_ROUTING=${{ secrets.OPENAI_API_KEY_ROUTING }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_STAGING }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_STAGING }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_STAGING }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_STAGING }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_STAGING }}" >> .env
          echo "ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY_STAGING }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_STAGING }}" >> .env
          echo "ANYSCALE_API_KEY=${{ secrets.ANYSCALE_API_KEY_STAGING }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY_STAGING }}" >> .env
          echo "BASESCAN_API_KEY=${{ secrets.BASESCAN_API_KEY_STAGING }}" >> .env
          echo "BASESCAN_API_URL=${{ secrets.BASESCAN_API_URL_STAGING }}" >> .env
          echo "COINBASE_RETAIL_API_KEY_NAME=${{ secrets.COINBASE_RETAIL_API_KEY_NAME_STAGING }}" >> .env
          echo "COINBASE_RETAIL_API_SECRET=${{ secrets.COINBASE_RETAIL_API_SECRET_STAGING }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY_STAGING }}" >> .env
          echo "FIREWORKS_API_KEY=${{ secrets.FIREWORKS_API_KEY_STAGING }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY_STAGING }}" >> .env
          echo "HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY_STAGING }}" >> .env
          echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_STAGING }}" >> .env
          echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY_STAGING }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY_STAGING }}" >> .env
          echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY_STAGING }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID_STAGING }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET_STAGING }}" >> .env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY_STAGING }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY_STAGING }}" >> .env
          echo "CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY_STAGING }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGING }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_STAGING }}" >> .env
          echo "TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN_STAGING }}" >> .env
          echo "TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY_STAGING }}" >> .env
          echo "TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET_STAGING }}" >> .env
          echo "TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN_STAGING }}" >> .env
          echo "TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_STAGING }}" >> .env
          echo "YUPP_HEAD_APP_BASE_URL=${{ secrets.YUPP_HEAD_APP_BASE_URL_STAGING }}" >> .env
          echo "CRYPTO_WALLET_PATH=${{ secrets.CRYPTO_WALLET_PATH_STAGING }}" >> .env
          echo "CDP_API_KEY_NAME=${{ secrets.CDP_API_KEY_NAME_STAGING }}" >> .env
          echo "CDP_API_KEY_PRIVATE_KEY=${{ secrets.CDP_API_KEY_PRIVATE_KEY_STAGING }}" >> .env
          echo "UPSTASH_REDIS_URL=${{ secrets.UPSTASH_REDIS_URL_STAGING }}" >> .env
          echo "UPSTASH_REDIS_TOKEN=${{ secrets.UPSTASH_REDIS_TOKEN_STAGING }}" >> .env
          echo "ATTACHMENT_BUCKET=${{ secrets.ATTACHMENT_BUCKET_STAGING }}" >> .env
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}

    - name: Authenticate Docker
      run: gcloud auth configure-docker --quiet

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.IMAGE_NAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        file: ${{ env.DOCKERFILE }}

    - name: Install gcloud beta
      if: github.event.inputs.gpu == 'true'
      run: gcloud components install beta

    - name: Deploy to Cloud Run
      run: |
        if [[ "${{ github.event.inputs.gpu }}" == "true" ]]; then
          gcloud beta run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --cpu ${{ env.CPU }} \
            --memory ${{ env.MEMORY }} \
            --gpu-type nvidia-l4 \
            --gpu 1 \
            --service-min-instances 1 \
            --args=service \
            --no-cpu-throttling \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --vpc-egress=private-ranges-only \
            --network=default \
            --subnet=default \
            --command="/app/ypl/pytorch/serve/entrypoint.sh"
        else
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }} \
            --platform managed \
            --region ${{ env.REGION }} \
            --allow-unauthenticated \
            --cpu ${{ env.CPU }} \
            --memory ${{ env.MEMORY }} \
            --args=service \
            --add-cloudsql-instances=${{ env.CLOUD_SQL_CONNECTION_NAME }} \
            --vpc-egress=private-ranges-only \
            --network=default \
            --subnet=default \
            --command="/app/ypl/backend/entrypoint.sh"
        fi

    - name: Update traffic to latest version
      run: |
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --to-latest \
          --region ${{ env.REGION }} \
          --platform managed

    - name: Setup Python
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: actions/setup-python@v5
      with:
        python-version: 3.11

    - name: Cache Poetry install
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-1.8.2-0

    - name: Install Poetry
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry dependencies
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: .venv
        key: pydeps-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      run: poetry install --no-interaction --no-root --sync

    - name: Run migrations
      if: ${{ env.ENVIRONMENT == 'staging' && env.DB_OR_RULES_CHANGED == 'true' }}
      run: |
        echo "yupp" | poetry run alembic upgrade head

    - name: Refresh reward rules
      if: ${{ env.DB_OR_RULES_CHANGED == 'true' }}
      run: poetry run python -m ypl.cli refresh-rewards-rules

    - name: Tag commit
      run: |
        git fetch --tags
        TAG_NAME=latest-${{ github.event.inputs.environment || 'staging' }}
        PR_TITLES=$(git log $TAG_NAME..HEAD --pretty=format:"* %s (%al)")  # Get changes from last tag.
        {
          echo "PR_TITLES<<EOF"
          echo "${PR_TITLES}"
          echo "EOF"
        } >> $GITHUB_ENV
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'
        git tag -f $TAG_NAME ${{ github.sha }}
        git push origin $TAG_NAME --force

    - name: Post to Slack for Production Deployment
      if: env.ENVIRONMENT == 'production'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        payload: |
          {
            "text": "New backend service version deployed to production",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "New backend service version deployed to production\nChanges since last deployment:\n${{ env.PR_TITLES || '* No changes to report' }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_GG_PUSH_PRODUCTION }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
