name: Create Environment File

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        enum:
          - staging
          - production
      service_name:
        required: true
        type: string
        default: "backend"
        enum:
          - backend
          - backend-pytorch-service
          - backend-pytorch-service-bleeding
          - webhooks
          - partner-payments-server

jobs:
  create-env:
    runs-on: ubuntu-latest
    steps:
      - name: Set the environment
        run: |
          echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> .env

      - name: Fill in the common backend .env variables for 'backend' service
        if: inputs.service_name == 'backend' || inputs.service_name == 'backend-pytorch-service' || inputs.service_name == 'backend-pytorch-service-bleeding'
        run: |
          echo "PROJECT_NAME=\"Yupp-Server\" " >> .env
          echo "NLTK_DATA=\"data/nltk_data\" " >> .env
          echo "BACKEND_CORS_ORIGINS=${{ env.BACKEND_CORS_ORIGINS }}" >> .env
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> .env
          echo "GCP_REGION=${{ env.GCP_REGION }}" >> .env
          echo "PYTORCH_SERVE_GCP_URL='${{ env.PYTORCH_SERVE_GCP_URL || 'https://backend-pytorch-service-staging-451082535721.us-central1.run.app/api/v1' }}'" >> .env

          echo "X_API_KEY=${{ secrets.X_API_KEY }}" >> .env
          echo "X_ADMIN_API_KEY=${{ secrets.X_ADMIN_API_KEY }}" >> .env
          echo "ANALYTICS_SLACK_WEBHOOK_URL=${{ secrets.ANALYTICS_SLACK_WEBHOOK_URL }}" >> .env
          echo "CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE=${{ secrets.CRYPTO_EXCHANGE_PRICE_API_URL_COINBASE }}" >> .env
          echo "CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE=${{ secrets.CRYPTO_EXCHANGE_PRICE_API_KEY_COINBASE }}" >> .env

          echo "ROUTING_WEIGHTS='{\"random\": 0.1, \"top\": 0.7, \"min_simple_cost\": 0.2}'" >> .env
          echo "ROUTING_GOOD_MODELS_ALWAYS=True" >> .env
          echo "USE_GOOGLE_CLOUD_LOGGING=True" >> .env
          echo "ROUTING_TIMEOUT_SECS=1.25" >> .env

      - name: Fill in the production backend .env variables for 'backend' service
        if: (inputs.service_name == 'backend' || inputs.service_name == 'backend-pytorch-service' || inputs.service_name == 'backend-pytorch-service-bleeding') && inputs.environment == 'production'
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PRODUCTION }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PRODUCTION }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_PRODUCTION }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_PRODUCTION }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_PRODUCTION }}" >> .env
          echo "AMPLITUDE_API_KEY=${{ secrets.AMPLITUDE_API_KEY_PRODUCTION }}" >> .env
          echo "AMPLITUDE_API_SECRET=${{ secrets.AMPLITUDE_API_SECRET_PRODUCTION }}" >> .env
          echo "ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY_PRODUCTION }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_PRODUCTION }}" >> .env
          echo "ANYSCALE_API_KEY=${{ secrets.ANYSCALE_API_KEY_PRODUCTION }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY_PRODUCTION }}" >> .env
          echo "BASESCAN_API_KEY=${{ secrets.BASESCAN_API_KEY_PRODUCTION }}" >> .env
          echo "BASESCAN_API_URL=${{ secrets.BASESCAN_API_URL_PRODUCTION }}" >> .env
          echo "COINBASE_RETAIL_API_KEY_NAME=${{ secrets.COINBASE_RETAIL_API_KEY_NAME_PRODUCTION }}" >> .env
          echo "COINBASE_RETAIL_API_SECRET=${{ secrets.COINBASE_RETAIL_API_SECRET_PRODUCTION }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY_PRODUCTION }}" >> .env
          echo "FIREWORKS_API_KEY=${{ secrets.FIREWORKS_API_KEY_PRODUCTION }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY_PRODUCTION }}" >> .env
          echo "HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY_PRODUCTION }}" >> .env
          echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_PRODUCTION }}" >> .env
          echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY_PRODUCTION }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY_PRODUCTION }}" >> .env
          echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY_PRODUCTION }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID_PRODUCTION }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET_PRODUCTION }}" >> .env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY_PRODUCTION }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY_PRODUCTION }}" >> .env
          echo "CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY_PRODUCTION }}" >> .env
          echo "YAPP_TMP_API_KEY=${{ secrets.YAPP_TMP_API_KEY_PRODUCTION }}" >> .env
          echo "SAMBANOVA_API_KEY=${{ secrets.SAMBANOVA_API_KEY_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_PRODUCTION }}" >> .env
          echo "TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN_PRODUCTION }}" >> .env
          echo "TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY_PRODUCTION }}" >> .env
          echo "TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET_PRODUCTION }}" >> .env
          echo "TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN_PRODUCTION }}" >> .env
          echo "TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_PRODUCTION }}" >> .env
          echo "CDP_API_KEY_NAME=${{ secrets.CDP_API_KEY_NAME_PRODUCTION }}" >> .env
          echo "CDP_API_KEY_PRIVATE_KEY=${{ secrets.CDP_API_KEY_PRIVATE_KEY_PRODUCTION }}" >> .env
          echo "YUPP_HEAD_APP_BASE_URL=${{ secrets.YUPP_HEAD_APP_BASE_URL_PRODUCTION }}" >> .env
          echo "REWARDS_SLACK_WEBHOOK_URL=${{ secrets.REWARDS_SLACK_WEBHOOK_URL }}" >> .env
          echo "UPSTASH_REDIS_URL=${{ secrets.UPSTASH_REDIS_URL_PRODUCTION }}" >> .env
          echo "UPSTASH_REDIS_TOKEN=${{ secrets.UPSTASH_REDIS_TOKEN_PRODUCTION }}" >> .env
          echo "ATTACHMENT_BUCKET=${{ secrets.ATTACHMENT_BUCKET_PROD }}" >> .env
          echo "WALLET_ENCRYPTION_KEY=${{ secrets.WALLET_ENCRYPTION_KEY_PRODUCTION }}" >> .env

      - name: Fill in the staging backend .env variables for 'backend' service
        if: (inputs.service_name == 'backend' || inputs.service_name == 'backend-pytorch-service' || inputs.service_name == 'backend-pytorch-service-bleeding') && inputs.environment == 'staging'
        run: |
          echo "OPENAI_API_KEY_ROUTING=${{ secrets.OPENAI_API_KEY_ROUTING }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER_STAGING }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_STAGING }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_STAGING }}" >> .env
          echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE_STAGING }}" >> .env
          echo "POSTGRES_HOST_NON_POOLING=${{ secrets.POSTGRES_HOST_NON_POOLING_STAGING }}" >> .env
          echo "CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET=${{ secrets.CLOUD_SQL_PROXY_INSTANCE_UNIX_SOCKET_STAGING }}" >> .env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY_STAGING }}" >> .env
          echo "ALIBABA_API_KEY=${{ secrets.ALIBABA_API_KEY_STAGING }}" >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY_STAGING }}" >> .env
          echo "ANYSCALE_API_KEY=${{ secrets.ANYSCALE_API_KEY_STAGING }}" >> .env
          echo "AZURE_API_KEY=${{ secrets.AZURE_API_KEY_STAGING }}" >> .env
          echo "BASESCAN_API_KEY=${{ secrets.BASESCAN_API_KEY_STAGING }}" >> .env
          echo "BASESCAN_API_URL=${{ secrets.BASESCAN_API_URL_STAGING }}" >> .env
          echo "COINBASE_RETAIL_API_KEY_NAME=${{ secrets.COINBASE_RETAIL_API_KEY_NAME_STAGING }}" >> .env
          echo "COINBASE_RETAIL_API_SECRET=${{ secrets.COINBASE_RETAIL_API_SECRET_STAGING }}" >> .env
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY_STAGING }}" >> .env
          echo "FIREWORKS_API_KEY=${{ secrets.FIREWORKS_API_KEY_STAGING }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY_STAGING }}" >> .env
          echo "HUGGINGFACE_API_KEY=${{ secrets.HUGGINGFACE_API_KEY_STAGING }}" >> .env
          echo "MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY_STAGING }}" >> .env
          echo "NVIDIA_API_KEY=${{ secrets.NVIDIA_API_KEY_STAGING }}" >> .env
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY_STAGING }}" >> .env
          echo "PERPLEXITY_API_KEY=${{ secrets.PERPLEXITY_API_KEY_STAGING }}" >> .env
          echo "PLAID_CLIENT_ID=${{ secrets.PLAID_CLIENT_ID_STAGING }}" >> .env
          echo "PLAID_SECRET=${{ secrets.PLAID_SECRET_STAGING }}" >> .env
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY_STAGING }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY_STAGING }}" >> .env
          echo "CEREBRAS_API_KEY=${{ secrets.CEREBRAS_API_KEY_STAGING }}" >> .env
          echo "YAPP_TMP_API_KEY=${{ secrets.YAPP_TMP_API_KEY_STAGING }}" >> .env
          echo "SAMBANOVA_API_KEY=${{ secrets.SAMBANOVA_API_KEY_PRODUCTION }}" >> .env
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL_STAGING }}" >> .env
          echo "SLACK_WEBHOOK_CASHOUT=${{ secrets.SLACK_WEBHOOK_CASHOUT_STAGING }}" >> .env
          echo "TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN_STAGING }}" >> .env
          echo "TWITTER_CONSUMER_KEY=${{ secrets.TWITTER_CONSUMER_KEY_STAGING }}" >> .env
          echo "TWITTER_CONSUMER_SECRET=${{ secrets.TWITTER_CONSUMER_SECRET_STAGING }}" >> .env
          echo "TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN_STAGING }}" >> .env
          echo "TWITTER_ACCESS_TOKEN_SECRET=${{ secrets.TWITTER_ACCESS_TOKEN_SECRET_STAGING }}" >> .env
          echo "YUPP_HEAD_APP_BASE_URL=${{ secrets.YUPP_HEAD_APP_BASE_URL_STAGING }}" >> .env
          echo "CDP_API_KEY_NAME=${{ secrets.CDP_API_KEY_NAME_STAGING }}" >> .env
          echo "CDP_API_KEY_PRIVATE_KEY=${{ secrets.CDP_API_KEY_PRIVATE_KEY_STAGING }}" >> .env
          echo "UPSTASH_REDIS_URL=${{ secrets.UPSTASH_REDIS_URL_STAGING }}" >> .env
          echo "UPSTASH_REDIS_TOKEN=${{ secrets.UPSTASH_REDIS_TOKEN_STAGING }}" >> .env
          echo "ATTACHMENT_BUCKET=${{ secrets.ATTACHMENT_BUCKET_STAGING }}" >> .env
          echo "WALLET_ENCRYPTION_KEY=${{ secrets.WALLET_ENCRYPTION_KEY_STAGING }}" >> .env

      - name: Fill in the partner payments server .env variables
        if: inputs.service_name == 'partner-payments-server'
        run: |
          echo "PROJECT_NAME=\"Yupp Partner Payments Server\"" >> .env
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> .env
          echo "X_API_KEY=${{ secrets.X_API_KEY }}" >> .env
          echo "USE_GOOGLE_CLOUD_LOGGING=True" >> .env
