"""Add dense and sparse embedding vectors to memories.

Revision ID: c28c3a14d16d
Revises: f27b2d83b618
Create Date: 2025-02-12 18:03:38.797327+00:00

"""
from collections.abc import Sequence

from alembic import op
from pgvector.sqlalchemy import Vector
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c28c3a14d16d'
down_revision: str | None = 'f27b2d83b618'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('memories', sa.Column('content_pgvector', Vector(dim=1536), nullable=True))
    op.add_column('memories', sa.Column('content_tsvector', postgresql.TSVECTOR(), nullable=True))
    op.drop_column('memories', 'embedding')

    op.execute("""
    CREATE TRIGGER memories_vector_update
    BEFORE INSERT OR UPDATE ON memories
    FOR EACH ROW
    EXECUTE FUNCTION tsvector_update_trigger(content_tsvector, 'pg_catalog.english', memory_content);
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TRIGGER IF EXISTS memories_vector_update ON memories;")

    op.add_column('memories', sa.Column('embedding', Vector(dim=1536), autoincrement=False, nullable=True))
    op.drop_column('memories', 'content_tsvector')
    op.drop_column('memories', 'content_pgvector')
    # ### end Alembic commands ###
