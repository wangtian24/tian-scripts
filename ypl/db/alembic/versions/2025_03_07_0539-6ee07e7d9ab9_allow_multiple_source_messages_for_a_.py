"""allow multiple source messages for a memory

Revision ID: 6ee07e7d9ab9
Revises: d7c304ca1b88
Create Date: 2025-03-07 05:39:57.842721+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '6ee07e7d9ab9'
down_revision: str | None = 'd7c304ca1b88'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chat_message_memory_associations',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('association_id', sa.Uuid(), nullable=False),
    sa.Column('memory_id', sa.Uuid(), nullable=False),
    sa.Column('message_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['memory_id'], ['memories.memory_id'], name=op.f('fk_chat_message_memory_associations_memory_id_memories')),
    sa.ForeignKeyConstraint(['message_id'], ['chat_messages.message_id'], name=op.f('fk_chat_message_memory_associations_message_id_chat_messages')),
    sa.PrimaryKeyConstraint('association_id', 'memory_id', 'message_id', name=op.f('pk_chat_message_memory_associations'))
    )

    # Migrate data from source_message_id to the association table
    conn = op.get_bind()
    memories = conn.execute(
        sa.text("SELECT memory_id, source_message_id FROM memories WHERE source_message_id IS NOT NULL")
    ).fetchall()
    for memory_id, message_id in memories:
        conn.execute(
            sa.text(
                "INSERT INTO chat_message_memory_associations "
                "(association_id, memory_id, message_id, created_at, modified_at) "
                "VALUES (gen_random_uuid(), :memory_id, :message_id, now(), now())"
            ),
            {"memory_id": memory_id, "message_id": message_id}
        )

    op.drop_constraint('fk_memories_source_message_id_chat_messages', 'memories', type_='foreignkey')
    op.drop_column('memories', 'source_message_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('memories', sa.Column('source_message_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key('fk_memories_source_message_id_chat_messages', 'memories', 'chat_messages', ['source_message_id'], ['message_id'])

    # Migrate data from association table to source_message_id
    conn = op.get_bind()
    memory_messages = conn.execute(
        sa.text(
            "SELECT DISTINCT ON (memory_id) memory_id, message_id "
            "FROM chat_message_memory_associations "
            "ORDER BY memory_id, created_at"
        )
    ).fetchall()
    for memory_id, message_id in memory_messages:
        conn.execute(
            sa.text("UPDATE memories SET source_message_id = :message_id WHERE memory_id = :memory_id"),
            {"memory_id": memory_id, "message_id": message_id}
        )

    op.drop_table('chat_message_memory_associations')
    # ### end Alembic commands ###
