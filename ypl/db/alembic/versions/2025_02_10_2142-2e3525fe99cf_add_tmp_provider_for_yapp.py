"""add tmp provider for yapp

Revision ID: 2e3525fe99cf
Revises: 909aa91a1af8
Create Date: 2025-02-10 21:42:50.870142+00:00

"""
from collections.abc import Sequence
import datetime
from datetime import UTC
import uuid

from alembic import op
import sqlalchemy as sa
from psycopg2.extras import Json
from sqlmodel import Session

from ypl.backend.db import get_engine
from ypl.db.language_models import LanguageModel, Organization, Provider

# revision identifiers, used by Alembic.
revision: str = '2e3525fe99cf'
down_revision: str | None = '909aa91a1af8'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

YAPP_TMP_PROVIDER_NAME = "Yapp Temporary"
YAPP_TMP_PROVIDER_BASE_API_URL = "http://yapp-tmp0.yupp.ai/v1"
YAPP_TMP_PROVIDER_API_KEY_ENV_NAME = "YAPP_TMP_API_KEY" 
BSL_ORG_NAME = "Yupp BSL"
CREATOR_USER_ID = "SYSTEM"
CONTEXT_LENGTH = 1280000  # this is for the gpt-4o model
YAPP_METADATA = [
    ("Weather", "weather-yapp", 3006),
    ("YouTube Transcript", "youtube-transcript-yapp", 3007),
    ("News", "news-yapp", 3008),
    ("Wikipedia", "wikipedia-yapp", 3009),
]


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with Session(op.get_bind()) as session:
        # Check if provider exists
        provider_query = sa.text("""
            SELECT provider_id FROM providers WHERE name = :name
        """)
        result = session.execute(provider_query, {"name": YAPP_TMP_PROVIDER_NAME}).first()

        if result:
            # Provider exists, set deleted_at to None
            update_query = sa.text("""
                UPDATE providers 
                SET deleted_at = NULL
                WHERE name = :name
                RETURNING provider_id
            """)
            provider_id = session.execute(update_query, {"name": YAPP_TMP_PROVIDER_NAME}).scalar()
        else:
            # Provider doesn't exist, create new one
            insert_query = sa.text("""
                INSERT INTO providers (
                    created_at, provider_id, is_active, name, base_api_url, api_key_env_name
                ) VALUES (
                    NOW(), GEN_RANDOM_UUID(), true, :name, :base_api_url, :api_key_env_name
                )
                RETURNING provider_id
            """)
            provider_id = session.execute(insert_query, {
                "name": YAPP_TMP_PROVIDER_NAME,
                "base_api_url": YAPP_TMP_PROVIDER_BASE_API_URL,
                "api_key_env_name": YAPP_TMP_PROVIDER_API_KEY_ENV_NAME
            }).scalar()
            
        session.commit()

        row_organization = session.exec(sa.select(Organization.organization_id).where(Organization.organization_name == BSL_ORG_NAME)).first()
        organization_id = row_organization[0] if row_organization else None

        check_exist_query = sa.text("""
            SELECT language_model_id FROM language_models WHERE internal_name = :internal_name
        """)

        insert_query = sa.text("""
            INSERT INTO language_models (
                created_at, language_model_id, label, provider_id, internal_name,
                name, organization_id, is_pro, is_strong, context_window_tokens,
                status, creator_user_id, semantic_group, parameters, license,
                family
            ) VALUES (
                NOW(), GEN_RANDOM_UUID(), :label, :provider_id, :internal_name,
                :internal_name, :organization_id, false, false, :context_window_tokens,
                :status, :creator_user_id, 'yapp', :parameters, 'other',
                'yapp'
            )
        """)

        for label, internal_name, port in YAPP_METADATA:
            row = session.execute(check_exist_query, {"internal_name": internal_name}).first()
            if row:
                print(f"Language model {internal_name} already exists")
            else:
                session.execute(insert_query, {
                    "label": label,
                    "provider_id": provider_id,
                    "internal_name": internal_name,
                    "organization_id": organization_id,
                    "context_window_tokens": CONTEXT_LENGTH,
                    "status": "INACTIVE",
                    "creator_user_id": CREATOR_USER_ID,
                    "parameters": Json({"port": port})
            })
        session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with Session(op.get_bind()) as session:
        # First delete all language models for this provider
        row = session.exec(sa.select(Provider.provider_id).where(Provider.name == YAPP_TMP_PROVIDER_NAME)).first()
        if row:
            # set all yapss to soft deleted
            session.exec(sa.update(LanguageModel).where(LanguageModel.provider_id == row.provider_id).values(deleted_at=sa.func.now()))
            # set provider to soft deleted
            session.exec(
                sa.update(Provider)
                .where(Provider.name == YAPP_TMP_PROVIDER_NAME)
                .values(deleted_at=sa.func.now())
            )
        session.commit()
    # ### end Alembic commands ###
