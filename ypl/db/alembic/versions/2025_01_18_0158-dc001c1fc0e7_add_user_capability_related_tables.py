"""add user capability related tables

Revision ID: dc001c1fc0e7
Revises: 8e7d121fda22
Create Date: 2025-01-18 01:58:40.350221+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dc001c1fc0e7'
down_revision: str | None = '8e7d121fda22'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('ENABLED', 'DISABLED', name='usercapabilitystatus').create(op.get_bind())
    sa.Enum('ACTIVE', 'INACTIVE', 'DEPRECATED', name='capabilitystatus').create(op.get_bind())
    op.create_table('capabilities',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('capability_id', sa.Uuid(), nullable=False),
    sa.Column('capability_name', sa.Text(), nullable=False),
    sa.Column('version_number', sa.Integer(), server_default='1', nullable=False),
    sa.Column('effective_date', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'DEPRECATED', name='capabilitystatus', create_type=False), server_default='ACTIVE', nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('creator_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.user_id'], name=op.f('fk_capabilities_creator_user_id_users')),
    sa.PrimaryKeyConstraint('capability_id', name=op.f('pk_capabilities')),
    sa.UniqueConstraint('capability_name', 'version_number', 'effective_date', name='uq_capabilities_name_version_date')
    )
    op.create_index('ix_capabilities_name_version_date', 'capabilities', ['capability_name', 'version_number', 'effective_date'], unique=True)
    op.create_table('user_capability_overrides',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_capability_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Text(), nullable=False),
    sa.Column('capability_id', sa.UUID(), nullable=False),
    sa.Column('creator_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', postgresql.ENUM('ENABLED', 'DISABLED', name='usercapabilitystatus', create_type=False), server_default='ENABLED', nullable=False),
    sa.Column('reason', sa.Text(), nullable=False),
    sa.Column('effective_start_date', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=False),
    sa.Column('effective_end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('override_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['capability_id'], ['capabilities.capability_id'], name=op.f('fk_user_capability_overrides_capability_id_capabilities'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['creator_user_id'], ['users.user_id'], name=op.f('fk_user_capability_overrides_creator_user_id_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_user_capability_overrides_user_id_users'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_capability_id', name=op.f('pk_user_capability_overrides'))
    )
    op.create_index('ix_user_capability_overrides_dates', 'user_capability_overrides', ['effective_start_date', 'effective_end_date'], unique=False)
    op.create_index('ix_user_capability_overrides_user_capability', 'user_capability_overrides', ['user_id', 'capability_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_user_capability_overrides_user_capability', table_name='user_capability_overrides')
    op.drop_index('ix_user_capability_overrides_dates', table_name='user_capability_overrides')
    op.drop_table('user_capability_overrides')
    op.drop_index('ix_capabilities_name_version_date', table_name='capabilities')
    op.drop_table('capabilities')
    sa.Enum('ACTIVE', 'INACTIVE', 'DEPRECATED', name='capabilitystatus').drop(op.get_bind())
    sa.Enum('ENABLED', 'DISABLED', name='usercapabilitystatus').drop(op.get_bind())
    # ### end Alembic commands ###
