"""Create cashout tables

Revision ID: f24c498fd8c6
Revises: 15add8650730
Create Date: 2024-12-13 11:48:06.922110+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f24c498fd8c6'
down_revision: str | None = '15add8650730'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('NOT_STARTED', 'PENDING', 'SUCCESS', 'FAILED', name='paymenttransactionstatusenum').create(op.get_bind())
    sa.Enum('INR', 'USD', 'USDC', 'ETH', 'BTC', name='currencyenum').create(op.get_bind())
    sa.Enum('UPI_ID', 'PHONE_NUMBER', 'EMAIL', 'CRYPTO_ADDRESS', name='paymentinstrumentidentifiertypeenum').create(op.get_bind())
    sa.Enum('BANK', 'COINBASE', 'PAYPAL', 'ON_CHAIN', name='paymentinstrumentfacilitatorenum').create(op.get_bind())
    op.create_table('payment_instruments',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('payment_instrument_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('facilitator', postgresql.ENUM('BANK', 'COINBASE', 'PAYPAL', 'ON_CHAIN', name='paymentinstrumentfacilitatorenum', create_type=False), nullable=False),
    sa.Column('identifier_type', postgresql.ENUM('UPI_ID', 'PHONE_NUMBER', 'EMAIL', 'CRYPTO_ADDRESS', name='paymentinstrumentidentifiertypeenum', create_type=False), nullable=False),
    sa.Column('identifier', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_payment_instruments_user_id_users')),
    sa.PrimaryKeyConstraint('payment_instrument_id', name=op.f('pk_payment_instruments'))
    )
    op.create_index(op.f('ix_payment_instruments_user_id'), 'payment_instruments', ['user_id'], unique=False)
    op.create_table('payment_transactions',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('payment_transaction_id', sa.Uuid(), nullable=False),
    sa.Column('source_instrument_id', sa.Uuid(), nullable=False),
    sa.Column('destination_instrument_id', sa.Uuid(), nullable=False),
    sa.Column('currency', postgresql.ENUM('INR', 'USD', 'USDC', 'ETH', 'BTC', name='currencyenum', create_type=False), nullable=False),
    sa.Column('amount', sa.Numeric(precision=38, scale=18), nullable=False),
    sa.Column('status', postgresql.ENUM('NOT_STARTED', 'PENDING', 'SUCCESS', 'FAILED', name='paymenttransactionstatusenum', create_type=False), server_default='NOT_STARTED', nullable=False),
    sa.Column('last_status_change_at', sa.DateTime(), nullable=False),
    sa.Column('partner_reference_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['destination_instrument_id'], ['payment_instruments.payment_instrument_id'], name=op.f('fk_payment_transactions_destination_instrument_id_payment_instruments')),
    sa.ForeignKeyConstraint(['source_instrument_id'], ['payment_instruments.payment_instrument_id'], name=op.f('fk_payment_transactions_source_instrument_id_payment_instruments')),
    sa.PrimaryKeyConstraint('payment_transaction_id', name=op.f('pk_payment_transactions'))
    )
    op.add_column('point_transactions', sa.Column('cashout_payment_transaction_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(op.f('fk_point_transactions_cashout_payment_transaction_id_payment_transactions'), 'point_transactions', 'payment_transactions', ['cashout_payment_transaction_id'], ['payment_transaction_id'])
    op.sync_enum_values('public', 'pointsactionenum', ['UNKNOWN', 'SIGN_UP', 'REWARD', 'CASHOUT', 'PROMPT', 'EVALUATION'],
                        [TableReference(table_schema='public', table_name='point_transactions', column_name='action_type')],
                        enum_values_to_rename=[])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values('public', 'pointsactionenum', ['UNKNOWN', 'SIGN_UP', 'PROMPT', 'EVALUATION', 'REWARD'],
                        [TableReference(table_schema='public', table_name='point_transactions', column_name='action_type')],
                        enum_values_to_rename=[])
    op.drop_constraint(op.f('fk_point_transactions_cashout_payment_transaction_id_payment_transactions'), 'point_transactions', type_='foreignkey')
    op.drop_column('point_transactions', 'cashout_payment_transaction_id')
    op.drop_table('payment_transactions')
    op.drop_index(op.f('ix_payment_instruments_user_id'), table_name='payment_instruments')
    op.drop_table('payment_instruments')
    sa.Enum('BANK', 'COINBASE', 'PAYPAL', 'ON_CHAIN', name='paymentinstrumentfacilitatorenum').drop(op.get_bind())
    sa.Enum('UPI_ID', 'PHONE_NUMBER', 'EMAIL', 'CRYPTO_ADDRESS', name='paymentinstrumentidentifiertypeenum').drop(op.get_bind())
    sa.Enum('INR', 'USD', 'USDC', 'ETH', 'BTC', name='currencyenum').drop(op.get_bind())
    sa.Enum('NOT_STARTED', 'PENDING', 'SUCCESS', 'FAILED', name='paymenttransactionstatusenum').drop(op.get_bind())
    # ### end Alembic commands ###
