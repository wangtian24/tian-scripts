"""create basic rbac table for soul permission

Revision ID: ead5e4a5a98f
Revises: ac5c0652ab5d
Create Date: 2025-02-07 04:59:40.158244+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ead5e4a5a98f'
down_revision: str | None = 'ac5c0652ab5d'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('READ_USERS', 'WRITE_USERS', 'DELETE_USERS', 'MANAGE_PAYMENT_INSTRUMENTS', 'VIEW_PAYMENT_INSTRUMENTS', 'MANAGE_CACHES', 'VIEW_CACHES', 'MANAGE_MODEL_PERFORMANCE', 'VIEW_MODEL_PERFORMANCE', 'MANAGE_CASHOUT', 'VIEW_CASHOUT', name='soul_permission_enum').create(op.get_bind())
    op.create_table('soul_roles',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('role_id', name=op.f('pk_soul_roles')),
    sa.UniqueConstraint('name', name='uq_soul_roles_name'),
    sa.UniqueConstraint('name', name=op.f('uq_soul_roles_name'))
    )
    op.create_table('soul_role_permissions',
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.Column('permission', postgresql.ENUM('READ_USERS', 'WRITE_USERS', 'DELETE_USERS', 'MANAGE_PAYMENT_INSTRUMENTS', 'VIEW_PAYMENT_INSTRUMENTS', 'MANAGE_CACHES', 'VIEW_CACHES', 'MANAGE_MODEL_PERFORMANCE', 'VIEW_MODEL_PERFORMANCE', 'MANAGE_CASHOUT', 'VIEW_CASHOUT', name='soul_permission_enum', create_type=False), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['soul_roles.role_id'], name=op.f('fk_soul_role_permissions_role_id_soul_roles')),
    sa.PrimaryKeyConstraint('role_id', 'permission', name=op.f('pk_soul_role_permissions'))
    )
    op.create_table('soul_user_roles',
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['soul_roles.role_id'], name=op.f('fk_soul_user_roles_role_id_soul_roles')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_soul_user_roles_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_soul_user_roles'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('soul_user_roles')
    op.drop_table('soul_role_permissions')
    op.drop_table('soul_roles')
    sa.Enum('READ_USERS', 'WRITE_USERS', 'DELETE_USERS', 'MANAGE_PAYMENT_INSTRUMENTS', 'VIEW_PAYMENT_INSTRUMENTS', 'MANAGE_CACHES', 'VIEW_CACHES', 'MANAGE_MODEL_PERFORMANCE', 'VIEW_MODEL_PERFORMANCE', 'MANAGE_CASHOUT', 'VIEW_CASHOUT', name='soul_permission_enum').drop(op.get_bind())
    # ### end Alembic commands ###
