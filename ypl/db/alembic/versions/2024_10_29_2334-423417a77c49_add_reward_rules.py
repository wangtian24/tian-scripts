"""add reward rules

Revision ID: 423417a77c49
Revises: 132b9e1b407e
Create Date: 2024-10-29 23:34:41.957378+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlmodel import Session
from ypl.db.rewards import RewardAmountRule, RewardProbabilityRule


# revision identifiers, used by Alembic.
revision: str = '423417a77c49'
down_revision: str | None = '132b9e1b407e'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reward_amount_rules',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('conditions', sa.JSON(), nullable=False),
    sa.Column('reward_amount_rule_id', sa.Uuid(), nullable=False),
    sa.Column('min_value', sa.Integer(), nullable=True),
    sa.Column('max_value', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Float(), nullable=True),
    sa.Column('comments', sa.ARRAY(sa.String()), nullable=True),
    sa.PrimaryKeyConstraint('reward_amount_rule_id', name=op.f('pk_reward_amount_rules'))
    )
    op.create_table('reward_probability_rules',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('conditions', sa.JSON(), nullable=False),
    sa.Column('reward_probability_rule_id', sa.Uuid(), nullable=False),
    sa.Column('probability', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('reward_probability_rule_id', name=op.f('pk_reward_probability_rules'))
    )
    op.add_column('rewards', sa.Column('reward_probability_rule_id', sa.Uuid(), nullable=True))
    op.add_column('rewards', sa.Column('reward_amount_rule_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(op.f('fk_rewards_reward_amount_rule_id_reward_amount_rules'), 'rewards', 'reward_amount_rules', ['reward_amount_rule_id'], ['reward_amount_rule_id'])
    op.create_foreign_key(op.f('fk_rewards_reward_probability_rule_id_reward_probability_rules'), 'rewards', 'reward_probability_rules', ['reward_probability_rule_id'], ['reward_probability_rule_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_rewards_reward_probability_rule_id_reward_probability_rules'), 'rewards', type_='foreignkey')
    op.drop_constraint(op.f('fk_rewards_reward_amount_rule_id_reward_amount_rules'), 'rewards', type_='foreignkey')
    op.drop_column('rewards', 'reward_amount_rule_id')
    op.drop_column('rewards', 'reward_probability_rule_id')
    op.drop_table('reward_probability_rules')
    op.drop_table('reward_amount_rules')
    # ### end Alembic commands ###
