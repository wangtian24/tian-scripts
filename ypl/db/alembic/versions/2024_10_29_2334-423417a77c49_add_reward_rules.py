"""add reward rules

Revision ID: 423417a77c49
Revises: 132b9e1b407e
Create Date: 2024-10-29 23:34:41.957378+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlmodel import Session
from ypl.db.rewards import RewardAmountRule, RewardProbabilityRule


# revision identifiers, used by Alembic.
revision: str = '423417a77c49'
down_revision: str | None = '132b9e1b407e'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('reward_amount_rules',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('conditions', sa.JSON(), nullable=False),
    sa.Column('reward_amount_rule_id', sa.Uuid(), nullable=False),
    sa.Column('min_value', sa.Integer(), nullable=True),
    sa.Column('max_value', sa.Integer(), nullable=True),
    sa.Column('mean_value', sa.Float(), nullable=True),
    sa.Column('comments', sa.ARRAY(sa.String()), nullable=True),
    sa.PrimaryKeyConstraint('reward_amount_rule_id', name=op.f('pk_reward_amount_rules'))
    )
    op.create_table('reward_probability_rules',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('conditions', sa.JSON(), nullable=False),
    sa.Column('reward_probability_rule_id', sa.Uuid(), nullable=False),
    sa.Column('probability', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('reward_probability_rule_id', name=op.f('pk_reward_probability_rules'))
    )
    op.add_column('rewards', sa.Column('reward_probability_rule_id', sa.Uuid(), nullable=True))
    op.add_column('rewards', sa.Column('reward_amount_rule_id', sa.Uuid(), nullable=True))
    op.create_foreign_key(op.f('fk_rewards_reward_amount_rule_id_reward_amount_rules'), 'rewards', 'reward_amount_rules', ['reward_amount_rule_id'], ['reward_amount_rule_id'])
    op.create_foreign_key(op.f('fk_rewards_reward_probability_rule_id_reward_probability_rules'), 'rewards', 'reward_probability_rules', ['reward_probability_rule_id'], ['reward_probability_rule_id'])

    # Add initial reward amount rules
    amount_rules = [
        RewardAmountRule(
            name="high",
            priority=300,
            is_active=True,
            conditions={
                "all": [
                    {
                        "name": "turn_quality_score",
                        "operator": "greater_than_or_equal_to",
                        "value": 8,
                    }
                ]
            },
            min_value=200,
            max_value=500,
            mean_value=300,
            comments=["Amazing work!", "Outstanding contribution!", "Excellent job!"],
        ),
        RewardAmountRule(
            name="medium",
            priority=200,
            is_active=True,
            conditions={
                "all": [
                    {
                        "name": "turn_quality_score",
                        "operator": "greater_than_or_equal_to",
                        "value": 4,
                    }
                ]
            },
            min_value=50,
            max_value=200,
            mean_value=100,
            comments=["Nice work!", "Good job!", "Keep it up!"],
        ),
        RewardAmountRule(
            name="low",
            priority=100,
            is_active=True,
            conditions={},
            min_value=10,
            max_value=50,
            mean_value=25,
            comments=["Thanks for participating!", "Keep trying!"],
        ),
        RewardAmountRule(
            name="very_low",
            priority=0,
            is_active=True,
            is_default=True,
            conditions={
                "all": [
                    {
                        "name": "credits",
                        "operator": "greater_than",
                        "value": 25000,
                    }
                ]
            },
            min_value=0,
            max_value=10,
            mean_value=0,
            comments=["Thank you for participating."],
        ),
    ]

    # Add initial reward probability rules
    probability_rules = [
        RewardProbabilityRule(
            name="high_credits",
            priority=300,
            is_active=True,
            conditions={
                "all": [
                    {
                        "name": "credits",
                        "operator": "greater_than",
                        "value": 25000,
                    }
                ]
            },
            probability=0.05,
        ),
        RewardProbabilityRule(
            name="first_turn",
            priority=250,
            is_active=True,
            conditions={
                "all": [
                    {
                        "name": "is_first_turn",
                        "operator": "is_true",
                        "value": True,
                    }
                ]
            },
            probability=1.0,
        ),
        RewardProbabilityRule(
            name="new_or_inactive_user",
            priority=150,
            is_active=True,
            conditions={
                "any": [
                    {
                        "name": "is_new_user",
                        "operator": "is_true",
                        "value": True,
                    },
                    {
                        "name": "is_inactive_user",
                        "operator": "is_true",
                        "value": True,
                    },
                ]
            },
            probability=0.9,
        ),
        RewardProbabilityRule(
            name="active_user",
            priority=0,
            is_active=True,
            is_default=True,
            conditions={},
            probability=0.8,
        ),
    ]

    with Session(op.get_bind()) as session:
        session.add_all(amount_rules)
        session.add_all(probability_rules)
        session.commit()
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('fk_rewards_reward_probability_rule_id_reward_probability_rules'), 'rewards', type_='foreignkey')
    op.drop_constraint(op.f('fk_rewards_reward_amount_rule_id_reward_amount_rules'), 'rewards', type_='foreignkey')
    op.drop_column('rewards', 'reward_amount_rule_id')
    op.drop_column('rewards', 'reward_probability_rule_id')
    op.drop_table('reward_probability_rules')
    op.drop_table('reward_amount_rules')
    # ### end Alembic commands ###
