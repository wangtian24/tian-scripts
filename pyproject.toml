[project]
name = "ypl"
description = "Backend service for Yupp"
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.11"


[tool.ruff]
# The directories to consider when resolving first- vs. third-party imports
src = ["ypl"]

exclude = [
    "ypl/db/alembic/versions/*",
    "tmp/",
    "notebooks/",
]

line-length = 120
indent-width = 4

# Run ruff on jupyter notebooks (this is not enabled by default).
extend-include = ["*.ipynb"]

[tool.ruff.lint.per-file-ignores]
# ignore star and unused imports
"__init__.py" = ["F403", "F405"]
# ignore prompt line too long
"prompts.py" = ["E501"]

[tool.ruff.lint]
select = [
    # flake8-bugbear
    "B",
    # pycodestyle error
    "E",
    # pyflakes
    "F",
    # isort
    "I",
    # pyupgrade
    "UP",
    # pycodestyle warning
    "W",
]

# Rule codes to ignore.
ignore = []

# Allows fix for all enabled rules when `--fix` is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes, indent with spaces, and respect trailing commas
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
order-by-type = true
no-lines-before = ["future", "standard-library"]

[tool.poetry]
name = "ypl"
version = "0.0.1"
description = "Backend service for Yupp"
license = "Proprietary"
authors = [
    "Yupp Eng <eng@yupp.ai>",
]
readme = "README.md"
package-mode = true

[tool.poetry.dependencies]
aiohttp = "3.10.6"
alembic = "1.13.2"
alembic-postgresql-enum = "1.3.0"
async-lru = "2.0.4"
business-rules = "1.1.1"
cachetools = "5.5.0"
celery = "5.4.0"
choix = "0.3.5"
click = "8.1.7"
datasets = "2.21.0"
email-normalize = "2.0.0"
fast-langdetect = "0.2.1"
fastapi = "0.112.0"
gitpython = "3.1.43"
google-auth = "2.35.0"
google-generativeai = "0.8.3"
google-cloud-aiplatform = {version = "1.76.0", extras = ["tokenization"]}
google-cloud-logging = "3.11.3"
google-cloud-monitoring = "2.25.0"
google-cloud-run = "0.10.14"
google-cloud-secret-manager = "2.22.0"
html2text = "2024.2.26"
langchain = "0.3.18"
langchain-anthropic = "0.3.8"
langchain-community = "0.3.17"
langchain-google-vertexai = "2.0.13" #package for VertexAI
langchain-google-genai = "2.0.9" #package for Google Generative AI
langchain-mistralai = "0.2.6"
langchain-openai = "0.3.4"
langchain-huggingface="0.1.2"
langchain-text-splitters="0.3.6"
langchain-together="0.3.0"
langdetect = "1.0.9"
nltk = "3.8.1"
nuggetizer = "0.0.5"
numba = "0.60.0"
openai = "1.61.0"
orjson = "3.10.0"
pandas = "2.2.2"
paypal-payouts-sdk = "1.0.0"
pgvector = "0.2.5"
psycopg2-binary = "2.9.9"
pydantic = "2.10.3"
pydantic-settings = "2.4.0"
pytest-asyncio = "0.24.0"
pytest-xdist = "3.6.1"
pytest-mock = "3.14.0"
pytest-repeat = "0.9.3"
python = ">=3.11,<3.12"
python-dotenv = "1.0.1"
pymupdf = "1.25.3"
py-moneyed = "3.0"
upstash-redis="1.2.0"
rapidfuzz = "3.12.1"
redis = "5.2.1"
requests = "2.32.3"
scikit-learn = "1.4.2"
scipy = "1.15.0"
sentence-transformers = "3.0.1"
sqlalchemy = {version = "2.0.32", extras = ["asyncio"]}
sqlmodel = "0.0.21"
tenacity = "8.5.0"
together = "1.3.2"
tqdm = "4.66.3"
types-PyYAML = "6.0.12.20240917"
types-cachetools = "5.5.0.20240820"
types-requests = "2.32.0.20240914"
uvicorn = {version = "0.28.0", extras = ["standard"]}
uvloop = "0.21.0"
asyncpg = "0.29.0"
anthropic = "0.47.0"
slack-sdk = "3.33.1"
tweepy = "4.14.0"
cdp-sdk = "0.14.0"  # coinbase sdk
plaid-python = "16.0.0"
python-multipart = "0.0.20"
gcloud-aio-storage = "9.3.0"
beautifulsoup4 = "4.13.3"
random-slugs = "^1.0.4"
resend = "^2.5.1"
pillow-heif = "^0.21.0"
types-protobuf = "^5.29.1.20250208"
more-itertools = "10.6.0"
[tool.poetry.group.dev.dependencies]
httpx = "0.28.0"
ipykernel = "6.29.5"
mypy = "1.9.0"
pandas-stubs = "2.2.0.240218"
pre-commit = "3.5.0"
pytest = "8.3.3"
pytest-asyncio = "0.24.0"
ruff = "0.2.1"
pytest-alembic = "0.11.1"
pytest-mock-resources = {extras = ["postgres-binary"], version = "2.12.0"}

[tool.poetry.group.client.dependencies]
locust = "2.32.5"

[tool.poetry.group.pytorch.dependencies]
torch = "2.4.1"
torchvision = "0.19.1"
torchaudio = "2.4.1"
transformers = ">=4.45.1,<4.46.0"
accelerate = ">=0.34.2,<0.35.0"
schedulefree = ">=1.2.7,<1.3.0"
janus = "1.0.0"

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true  # Type-check the interior of functions without type annotations
disallow_untyped_defs = true  # Prevent functions without type annotations
disallow_untyped_calls = false  # Prevent calls to functions without type annotations
disallow_incomplete_defs = true  # Prevent functions with incomplete type annotations
no_implicit_optional = true  # Treat None and optional separately
strict_optional = true  # Enable strict Optional checks
warn_redundant_casts = true  # Warn about redundant casts
warn_unused_ignores = true  # Warn about unneeded '# type: ignore' comments
warn_return_any = true  # Warn about returning values of type 'Any' from functions
ignore_missing_imports = true  # Ignore errors for missing imports
exclude = ["ypl/db/alembic/", "tmp/", "notebooks/", "ypl/db/oneoffs/"]
cache_dir = ".mypy_cache"
incremental = true

[tool.pytest.ini_options]
addopts = "--ignore ypl/pytorch/tests --ignore ypl/backend/tests/periodic_tests"  # Skip torch tests on CI box until we have a GPU
filterwarnings = [
    "ignore::DeprecationWarning:httpx.*:",
    "ignore::DeprecationWarning:tweepy.*:",
    "ignore::FutureWarning:transformers.*",
    "ignore::PendingDeprecationWarning:starlette.*",
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio: mark test as async",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
