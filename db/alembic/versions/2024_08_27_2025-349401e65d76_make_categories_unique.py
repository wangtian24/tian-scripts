"""make categories unique

Revision ID: 349401e65d76
Revises: 5197173a2b63
Create Date: 2024-08-27 20:25:22.302567+00:00

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '349401e65d76'
down_revision: str | None = '5197173a2b63'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ratings_history',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('modified_at', sa.DateTime(timezone=True), server_default=sa.text("(now() AT TIME ZONE 'utc')"), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rating_history_id', sa.Uuid(), nullable=False),
    sa.Column('model_id', sa.Uuid(), nullable=False),
    sa.Column('category_id', sa.Uuid(), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('score_lower_bound_95', sa.Float(), nullable=False),
    sa.Column('score_upper_bound_95', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['categories.category_id'], name=op.f('ratings_history_category_id_fkey')),
    sa.ForeignKeyConstraint(['model_id'], ['language_models.model_id'], name=op.f('ratings_history_model_id_fkey')),
    sa.PrimaryKeyConstraint('rating_history_id', name=op.f('pk_ratings_history')),
    sa.UniqueConstraint('model_id', 'category_id', 'created_at', name=op.f('uq_model_category_created_at'))
    )
    op.create_index(op.f('ix_ratings_history_rating_history_id'), 'ratings_history', ['rating_history_id'], unique=False)
    op.create_unique_constraint(op.f('uq_name_parent'), 'categories', ['name', 'parent_category_id'])
    op.add_column('ratings', sa.Column('rating_history_id', sa.Uuid(), nullable=False))
    op.create_foreign_key(op.f('ratings_rating_history_id_fkey'), 'ratings', 'ratings_history', ['rating_history_id'], ['rating_history_id'])
    op.drop_column('ratings', 'score')
    op.drop_column('ratings', 'upper_bound_95')
    op.drop_column('ratings', 'lower_bound_95')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ratings', sa.Column('lower_bound_95', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('ratings', sa.Column('upper_bound_95', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.add_column('ratings', sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False))
    op.drop_constraint(op.f('ratings_rating_history_id_fkey'), 'ratings', type_='foreignkey')
    op.drop_column('ratings', 'rating_history_id')
    op.drop_constraint(op.f('uq_name_parent'), 'categories', type_='unique')
    op.drop_index(op.f('ix_ratings_history_rating_history_id'), table_name='ratings_history')
    op.drop_table('ratings_history')
    # ### end Alembic commands ###
